# Claim specific schema

extend type Query {
	claimGet(in: ClaimGetRequestInput): ClaimGetResponse
	claimProof(in: ClaimProofRequestInput): ClaimProofResponse
}

extend type Mutation {
	claimSave(in: ClaimSaveRequestInput): ClaimSaveResponse
}

## Inputs

input ClaimGetRequestInput {
	did: String!
}

type ClaimGetResponse {
	claims: [Claim!]
	claimsRaw: [String!]
}

type ClaimProofResponse {
	claim: Claim!
	claimRaw: String!
}

input ClaimProofRequestInput{
	claim: ClaimInput
	claimJson: String
	did: String!
}

input ClaimSaveRequestInput {
	claim: ClaimInput
	claimJson: String
}

type ClaimSaveResponse {
	claim: Claim!
	claimRaw: String!
}

input ClaimInput {
	context: [String!]!
	type: [String!]!
	credentialSubject: ClaimCredentialSubjectInput!
	issuer: String!
	holder: String!
	credentialSchema: ClaimCredentialSchemaInput!
	issuanceDate: String!
	proof: [LinkedDataProofInput!]!
}

input ClaimCredentialSubjectInput {
	id: String!
	metadata: ArticleMetadataInput!
}

input ClaimCredentialSchemaInput {
	id: String!
	type: String!
}

input ArticleMetadataInput {
	title: String
	revisionContentHash: String
	revisionContentURL: String
	canonicalURL: String
	slug: String
	description: String
	contributors: [ArticleMetadataContributorInput]
	images: [ArticleMetadataImageInput]
	tags: [String]
	primaryTag: String
	revisionDate: String
	originalPublishDate: String
	opinion: Boolean
	civilSchemaVersion: String
}

input ArticleMetadataContributorInput {
	role: String
	name: String
}

input ArticleMetadataImageInput {
	url: String
	hash: String
	h: Int
	w: Int
}

## Types

type Claim {
	context: [String!]!
	type: [String!]!
	credentialSubject: ContentClaimCredentialSubject!
	issuer: String!
	holder: String!
	credentialSchema: ClaimCredentialSchema!
	issuanceDate: String!
	proof: [Proof!]!
}

union Proof = LinkedDataProof | ClaimRegisteredProof | RootOnBlockChainProof

type ContentClaimCredentialSubject {
	id: String!
	metadata: ArticleMetadata!
}

type ClaimCredentialSchema {
	id: String!
	type: String!
}

type ClaimRegisteredProof {
	type: String!
	did: String!
	existsInDIDMTProof: String!
	notRevokedInDIDMTProof: String!
	didMTRootExistsProof: String!
	didRootExistsVersion: Int!
	root: String!
	didMTRoot: String!
}

type RootOnBlockChainProof {
	type: String!
	blockNumber: String!
	root: String!
	contractAddress: String!
	committerAddress: String!
	txHash: String!
}

type ArticleMetadata {
	title: String
	revisionContentHash: String
	revisionContentURL: String
	canonicalURL: String
	slug: String
	description: String
	contributors: [ArticleMetadataContributor]
	images: [ArticleMetadataImage]
	tags: [String]
	primaryTag: String
	revisionDate: String
	originalPublishDate: String
	Opinion: Boolean
	civilSchemaVersion: String
}

type ArticleMetadataContributor {
	role: String
	name: String
}

type ArticleMetadataImage {
	url: String
	hash: String
	h: Int
	w: Int
}
