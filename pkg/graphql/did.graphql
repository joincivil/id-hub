# DID specific schema

extend type Query {
	didGet(in: DidGetRequestInput): DidGetResponse
}

input DidGetRequestInput {
	did: String
}

type DidGetResponse {
	doc: DidDocument
	docRaw: String
}

type DidSaveResponse {
	doc: DidDocument
	docRaw: String
}

type DidDocAuthentication {
	publicKey: DidDocPublicKey
	idOnly: Boolean
}

type DidDocPublicKey {
	id: String
	type: String
	controller: String
	publicKeyPem: String
	publicKeyJwk: String
	publicKeyHex: String
	publicKeyBase64: String
	publicKeyBase58: String
	publicKeyMultibase: String
	ethereumAddress: String
}

type DidDocService {
	id: String
	type: String
	description: String
	publicKey: String
	serviceEndpoint: AnyValue
}

type DidDocument {
	id: String
	context: String
	controller: String
	publicKeys: [DidDocPublicKey!]
	authentications: [DidDocAuthentication!]
	services: [DidDocService!]
	created: Time
	updated: Time
	proof: LinkedDataProof
}

type LinkedDataProof {
	type: String
	creator: String
	created: Time
	proofValue: String
	domain: String
	nonce: String
}

input LinkedDataProofInput {
	type: String
	creator: String
	created: Time
	proofValue: String
	domain: String
	nonce: String
}

scalar AnyValue
scalar Time